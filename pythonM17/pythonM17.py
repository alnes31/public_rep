# Функция бинарного поиска из модуля 17.7
def binary_search(array, element, left, right):
    if left > right:  # если левая граница превысила правую,
        return False  # значит элемент отсутствует

    middle = (right + left) // 2  # находимо середину
    if array[middle] == element:  # если элемент в середине,
        return middle  # возвращаем этот индекс
    elif element < array[middle]:  # если элемент меньше элемента в середине
        # рекурсивно ищем в левой половине
        return binary_search(array, element, left, middle - 1)
    else:  # иначе в правой
        return binary_search(array, element, middle + 1, right)

# Функция быстрой сортировки из модуля 17.8
def qsort(array, left, right):
    middle = (left + right) // 2    # определяем середину массива(приблизительно)
    p = array[middle]               # запоминаем средний элемент массива как ведущий
    i, j = left, right
    while i <= j:                   # смещаемся к центру массива
        while array[i] < p:
            i += 1                  # ищем элемент больше или равный ведущему и запоминаем его индекс
        while array[j] > p:
            j -= 1                  # ищем элемент меньше или равный ведущему и запоминаем его индекс
        if i <= j:
            array[i], array[j] = array[j], array[i]
            i += 1                  # меняем найденные элементы местами, формируя слева группу меньше
            j -= 1                  # ведущего элемента и справа - больше

    if j > left:
        qsort(array, left, j)       # рекурсивно сортируем левую и правую части
    if right > i:
        qsort(array, i, right)
    return array
# подаём на вход последовательность чисел через пробел
array_str = '2 3 -1 4 0 6 -95 9 0 8 7 0 -45 787 0 -345 9898'
tryes=False
while tryes==False:                 #пока не введено корректное число просим пользователя ввести его
    usr_str=input("Введите произвольное число (от -1млн до 1млн)")
    try:
        usr_nmb=int(usr_str)        #попытка перевести введённые данные в число
        if -1000000<usr_nmb<1000000:
            tryes=True              #если введённое число в заданных границах, считаем попытку ввода удачной
        else:
            print("Введено некорректное число")
    except:
        ValueError
        print("Необходимо ввести число")

print("Введено корректное число "+str(usr_nmb))
array = list(map(int, array_str.split()))   #переводим последовательность чисел в список числовых элементов
print("Последовательность на входе\n"+str(array))
array_ext=qsort(array,0,len(array)-1)       #сортируем введённую последовательность и выводим на экран
print("Последовательность на выходе\n"+str(array_ext))
array_ext.append(usr_nmb)                   #добавляем число пользователя к отсортированной последовательности
array_ext=qsort(array_ext,0,len(array_ext)-1)#сортируем новую последовательность и выводим на экран
print("Последовательность на выходе с числом пользователя\n"+str(array_ext))
if array_ext[0] == usr_nmb:                 #проверяем граничные значения
    print("В последовательности на входе отсутствует число меньше введённого пользователем")
    input("\n \nДля выхода нажмите Enter")  #если число пользователя меньше или равно каждого из чисел
    exit()                                  #последовательности, оно не удовлетворяет условию задания
if array_ext[len(array_ext)-1]==usr_nmb and array_ext[len(array_ext)-2]<usr_nmb:
    print("В последовательности на входе отсутствует число больше или равное введённому пользователем")
    input("\n \nДля выхода нажмите Enter")  #если число пользователя больше каждого из чисел
    exit()                                  #последовательности, оно не удовлетворяет условию задания
# находим в отсортированной расширенной последоватеьности индекс введенного пользователем числа
srch_ndx=binary_search(array_ext,usr_nmb,0,len(array_ext)-1)
exitpoint=False
while exitpoint==False:
# если пользователь ввёл число равное одному из чисел начальной последовательности,
# определяем когда данное число встречается впервые
    if array_ext[srch_ndx]==array_ext[srch_ndx-1]:
        srch_ndx-=1
    else: exitpoint=True
# вывод ответа на экран
print("Искомое число - МАССИВ["+str(srch_ndx)+"]="+str(array_ext[srch_ndx-1]))
# ожидаем от пользователя разрешения завершить работу программы
input("\n \nДля выхода нажмите Enter")